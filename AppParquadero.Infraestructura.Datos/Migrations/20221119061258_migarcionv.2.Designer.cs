// <auto-generated />
using System;
using AppParquadero.Infraestructura.Datos.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppParqueadero.Infraestructura.Datos.Migrations
{
    [DbContext(typeof(ParqueaderoContexto))]
    [Migration("20221119061258_migarcionv.2")]
    partial class migarcionv2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("AppParqueadero.Dominio.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("FechaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TipoDocumuento")
                        .HasColumnType("varchar(3)");

                    b.Property<string>("usuarioCrea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioModifica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Empleado", b =>
                {
                    b.Property<Guid>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("TipoDocumuento")
                        .HasColumnType("varchar(3)");

                    b.Property<string>("usuarioCrea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioModifica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmpleadoId");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Horario", b =>
                {
                    b.Property<Guid>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioCrea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioModifica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Horario");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Tarifa", b =>
                {
                    b.Property<Guid>("TarifaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("FechaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("usuarioCrea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioModifica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TarifaId");

                    b.ToTable("Tarifa");

                    b.HasData(
                        new
                        {
                            TarifaId = new Guid("918ee23d-a6ac-45ec-8b12-eeffa0220fcc"),
                            Tipo = "Auto",
                            Valor = 3000m
                        },
                        new
                        {
                            TarifaId = new Guid("3654ecdd-0573-456c-b9b4-4aea3285a664"),
                            Tipo = "Moto",
                            Valor = 1000m
                        });
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Ticket", b =>
                {
                    b.Property<Guid>("TickedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaModifica")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraDeEntrada")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("HoraDeSalida")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("PuestoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TarifaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("Decimal");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("usuarioCrea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioModifica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TickedId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("PuestoId");

                    b.HasIndex("TarifaId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Ticked");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioCrea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioModifica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("EmpleadoId")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Puesto", b =>
                {
                    b.Property<Guid>("PuestoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CodigoPuesto")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Disponibilidad")
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime?>("FechaModifica")
                        .HasColumnType("datetime2");

                    b.Property<string>("usuarioCrea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarioModifica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PuestoId");

                    b.ToTable("Puesto");

                    b.HasData(
                        new
                        {
                            PuestoId = new Guid("b5f38779-158c-4c31-bda5-c41113f48adf"),
                            CodigoPuesto = "A0",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("c863a900-6ecb-4aed-9ba1-0a537a806902"),
                            CodigoPuesto = "A1",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("f948f608-5c73-46b8-844e-f05261d3814b"),
                            CodigoPuesto = "A2",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("6438d933-2da6-47f8-bc8c-984b62f04215"),
                            CodigoPuesto = "A3",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("e2a42931-a2fc-4b40-a695-227d1280bd46"),
                            CodigoPuesto = "A4",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("0dc9061a-7a16-42da-aac4-d741e88519bf"),
                            CodigoPuesto = "A5",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("0b33f6a1-b457-415b-b743-e28327ac2977"),
                            CodigoPuesto = "A6",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("829afa9d-71f4-4214-b0eb-2e2fbd213bae"),
                            CodigoPuesto = "A7",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("8f7c1123-1004-41de-8bca-97ac776df718"),
                            CodigoPuesto = "A8",
                            Disponibilidad = "Disponible"
                        },
                        new
                        {
                            PuestoId = new Guid("5b538258-62f2-48bc-873f-74eef86ea61a"),
                            CodigoPuesto = "A9",
                            Disponibilidad = "Disponible"
                        });
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Reserva", b =>
                {
                    b.Property<Guid>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("PuestoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PuestoId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Vehiculo", b =>
                {
                    b.Property<Guid>("VehiculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Marca")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Modelo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Placa")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(20)");

                    b.HasKey("VehiculoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Vehiculo");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Horario", b =>
                {
                    b.HasOne("AppParqueadero.Dominio.Entidades.Empleado", "Empleado")
                        .WithMany("Horarios")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Ticket", b =>
                {
                    b.HasOne("AppParqueadero.Dominio.Cliente", "Cliente")
                        .WithMany("Tickets")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppParqueadero.Dominio.Entidades.Empleado", "Empleado")
                        .WithMany("Tickets")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppParqueadero.Dominio.Puesto", "Puesto")
                        .WithMany("Tickets")
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppParqueadero.Dominio.Entidades.Tarifa", "Tarifa")
                        .WithMany("Tickets")
                        .HasForeignKey("TarifaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppParqueadero.Dominio.Vehiculo", "Vehiculo")
                        .WithMany("Tickets")
                        .HasForeignKey("VehiculoId")
                        .HasConstraintName("Fk_Vehiculo_VehiculoID")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Empleado");

                    b.Navigation("Puesto");

                    b.Navigation("Tarifa");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("AppParqueadero.Dominio.Entidades.Empleado", "Empleado")
                        .WithOne("Usuario")
                        .HasForeignKey("AppParqueadero.Dominio.Entidades.Usuario", "EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Reserva", b =>
                {
                    b.HasOne("AppParqueadero.Dominio.Cliente", "cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppParqueadero.Dominio.Puesto", "Puesto")
                        .WithMany("Reservas")
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppParqueadero.Dominio.Vehiculo", "Vehiculo")
                        .WithMany("Reservas")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("cliente");

                    b.Navigation("Puesto");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Vehiculo", b =>
                {
                    b.HasOne("AppParqueadero.Dominio.Cliente", "cliente")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Cliente", b =>
                {
                    b.Navigation("Reservas");

                    b.Navigation("Tickets");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Empleado", b =>
                {
                    b.Navigation("Horarios");

                    b.Navigation("Tickets");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Entidades.Tarifa", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Puesto", b =>
                {
                    b.Navigation("Reservas");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AppParqueadero.Dominio.Vehiculo", b =>
                {
                    b.Navigation("Reservas");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
